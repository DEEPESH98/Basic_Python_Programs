# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'attendance.ui'
#
# Created by: PyQt5 UI code generator 5.11.2
#
# WARNING! All changes made in this file will be lost!


import sys
import cv2, os
import shutil
import csv
import numpy as np
import pandas as pd
import datetime
import time
from PIL import Image

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1182, 862)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 1171, 222))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("PIT-black-resize-1-min.png"))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout_4.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 230, 1161, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.pB1 = QtWidgets.QPushButton(self.centralwidget)
        self.pB1.setGeometry(QtCore.QRect(100, 320, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pB1.setFont(font)
        self.pB1.setObjectName("pB1")
        self.PB2 = QtWidgets.QPushButton(self.centralwidget)
        self.PB2.setGeometry(QtCore.QRect(100, 380, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.PB2.setFont(font)
        self.PB2.setObjectName("PB2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(390, 320, 411, 31))
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(390, 380, 411, 31))
        self.lineEdit_2.setText("")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(160, 440, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(390, 440, 411, 31))
        self.lineEdit_3.setText("")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.Take_B = QtWidgets.QPushButton(self.centralwidget)
        self.Take_B.setGeometry(QtCore.QRect(100, 510, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Take_B.setFont(font)
        self.Take_B.setObjectName("Take_B")
        self.Train_B = QtWidgets.QPushButton(self.centralwidget)
        self.Train_B.setGeometry(QtCore.QRect(470, 510, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Train_B.setFont(font)
        self.Train_B.setObjectName("Train_B")
        self.Track_B = QtWidgets.QPushButton(self.centralwidget)
        self.Track_B.setGeometry(QtCore.QRect(840, 510, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Track_B.setFont(font)
        self.Track_B.setObjectName("Track_B")
        self.Quit_B = QtWidgets.QPushButton(self.centralwidget)
        self.Quit_B.setGeometry(QtCore.QRect(100, 560, 1001, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Quit_B.setFont(font)
        self.Quit_B.setObjectName("Quit_B")
        self.Total_Attendance_lable = QtWidgets.QLabel(self.centralwidget)
        self.Total_Attendance_lable.setGeometry(QtCore.QRect(104, 610, 991, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Total_Attendance_lable.setFont(font)
        self.Total_Attendance_lable.setAlignment(QtCore.Qt.AlignCenter)
        self.Total_Attendance_lable.setObjectName("Total_Attendance_lable")
        self.Total_attendance_lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.Total_attendance_lineEdit_4.setGeometry(QtCore.QRect(102, 640, 1001, 131))
        self.Total_attendance_lineEdit_4.setObjectName("Total_attendance_lineEdit_4")
        self.CL1_B = QtWidgets.QPushButton(self.centralwidget)
        self.CL1_B.setGeometry(QtCore.QRect(880, 320, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.CL1_B.setFont(font)
        self.CL1_B.setObjectName("CL1_B")
        self.CL2_B = QtWidgets.QPushButton(self.centralwidget)
        self.CL2_B.setGeometry(QtCore.QRect(880, 380, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.CL2_B.setFont(font)
        self.CL2_B.setObjectName("CL2_B")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1182, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actioninstruction = QtWidgets.QAction(MainWindow)
        self.actioninstruction.setObjectName("actioninstruction")
        self.actionAbout_us = QtWidgets.QAction(MainWindow)
        self.actionAbout_us.setObjectName("actionAbout_us")
        self.actionAbout_us_2 = QtWidgets.QAction(MainWindow)
        self.actionAbout_us_2.setObjectName("actionAbout_us_2")
        self.actionopen_file = QtWidgets.QAction(MainWindow)
        self.actionopen_file.setObjectName("actionopen_file")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.menuFile.addAction(self.actionopen_file)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuHelp.addAction(self.actioninstruction)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout_us_2)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.CL1_B.clicked.connect(self.lineEdit.clear)
        self.CL2_B.clicked.connect(self.lineEdit_2.clear)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.Take_B.clicked.connect(self.TakeImages)
        self.Train_B.clicked.connect(self.TrainImages)
        self.Track_B.clicked.connect(self.TrackImages)




    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow", "STUDENT ATTENDANCE SYSTEM USING FACE ID"))
        self.pB1.setText(_translate("MainWindow", "Enter Id"))
        self.PB2.setText(_translate("MainWindow", "Enter Name"))
        self.label_3.setText(_translate("MainWindow", "Notification :"))
        self.Take_B.setText(_translate("MainWindow", "Take Images"))
        self.Train_B.setText(_translate("MainWindow", "Train Images"))
        self.Track_B.setText(_translate("MainWindow", "Track Images"))
        self.Quit_B.setText(_translate("MainWindow", "QUIT"))
        self.Total_Attendance_lable.setText(_translate("MainWindow", "Total Attendance"))
        self.CL1_B.setText(_translate("MainWindow", "Clear"))
        self.CL2_B.setText(_translate("MainWindow", "Clear"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actioninstruction.setText(_translate("MainWindow", "Instruction"))
        self.actionAbout_us.setText(_translate("MainWindow", "About us"))
        self.actionAbout_us_2.setText(_translate("MainWindow", "About us"))
        self.actionopen_file.setText(_translate("MainWindow", "Open file"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))



    def TakeImages(self):
        # get a txt
        Id= self.lineEdit.text()
        name= self.lineEdit_2.text()


        if( Id.isdigit() and name.isalpha()):
            cam = cv2.VideoCapture(0)
            harcascadePath = "haarcascade_frontalface_default.xml"
            detector = cv2.CascadeClassifier(harcascadePath)
            sampleNum = 0
            while (True):
                ret, img = cam.read()
                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                faces = detector.detectMultiScale(gray, 1.3, 5)
                for (x, y, w, h) in faces:
                    cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)
                    # incrementing sample number
                    sampleNum = sampleNum + 1
                    # saving the captured face in the dataset folder TrainingImage
                    cv2.imwrite("TrainingImage\ " + name + "." + Id + '.' + str(sampleNum) + ".jpg",
                                gray[y:y + h, x:x + w])
                    # display the frame
                    cv2.imshow('frame', img)
                # wait for 100 miliseconds
                if cv2.waitKey(100) & 0xFF == ord('q'):
                    break
                # break if the sample number is morethan 100
                elif sampleNum > 60:
                    break
            cam.release()
            cv2.destroyAllWindows()
            res = "Images Saved for ID : " + Id + " Name : " + name
            row = [Id, name]
            with open('StudentDetails\StudentDetails.csv', 'a+') as csvFile:
                writer = csv.writer(csvFile)
                writer.writerow(row)
            csvFile.close()
            self.lineEdit_3.setText(res)
        else:
            if (Id.isdigit()):
                res = "Enter Alphabetical Name"
                self.lineEdit_3.configure(res)
            if (name.isalpha()):
                res = "Enter Numeric Id"
                self.lineEdit_3.setText(res)



    def TrainImages(self):
        recognizer = cv2.face_LBPHFaceRecognizer.create()
        harcascadePath = "haarcascade_frontalface_default.xml"
        

        detector = cv2.CascadeClassifier(harcascadePath)
        faces, Id = self.getImagesAndLabels("TrainingImage")
        
        recognizer.train(faces, np.array(Id))
        
        recognizer.save("TrainingImageLabel\Trainner.yml")
        
        res = "Image Trained"
        self.lineEdit_3.setText(res)

    def getImagesAndLabels(self,path):

        # get the path of all the files in the folder
        imagePaths = [os.path.join(path, f) for f in os.listdir(path)]
        #print(imagePaths)
        # create empth face list
        
        faces = []
        # create empty ID list
        Ids = []
        # now looping through all the image paths and loading the Ids and the images
        for imagePath in imagePaths:
            # loading the image and converting it to gray scale
            pilImage = Image.open(imagePath).convert('L')
            
            # Now we are converting the PIL image into numpy array
            imageNp = np.array(pilImage, 'uint8')
            
            # getting the Id from the image
            Id = int(os.path.split(imagePath)[-1].split(".")[1])
            # extract the face from the training image sample
            faces.append(imageNp)
            Ids.append(Id)

        return faces, Ids

    def TrackImages(self):
        recognizer = cv2.face.LBPHFaceRecognizer_create()  # cv2.createLBPHFaceRecognizer()
        recognizer.read("TrainingImageLabel\Trainner.yml")

        #harcascadePath = "haarcascade_frontalface_default.xml"

        faceCascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
        df = pd.read_csv("StudentDetails\StudentDetails.csv")

        cam = cv2.VideoCapture(0)

        font = cv2.FONT_HERSHEY_SIMPLEX

        col_names = ['Id', 'Name', 'Date', 'Time']

        attendance = pd.DataFrame(columns=col_names)
        while True:
            ret, im = cam.read()
            
            gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
            
            faces = faceCascade.detectMultiScale(gray, 1.2, 5)
            
            for (x, y, w, h) in faces:
                
                cv2.rectangle(im, (x, y), (x + w, y + h), (225, 0, 0), 2)
                
                Id, conf = recognizer.predict(gray[y:y + h, x:x + w])
                
                if (conf < 50):
                    
                    ts = time.time()
                    
                    date = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    
                    timeStamp = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')
                    
                    aa = df.loc[df['Id'] == Id]['Name'].values
                    
                    tt = str(Id) + "-" + aa
                    
                    attendance.loc[len(attendance)] = [Id, aa, date, timeStamp]

                else:
                    Id = 'Unknown'
                    tt = str(Id)
                if (conf > 75):
                    
                    noOfFile = len(os.listdir("ImagesUnknown")) + 1
                    
                    cv2.imwrite("ImagesUnknown\Image" + str(noOfFile) + ".jpg", im[y:y + h, x:x + w])
                    
                cv2.putText(im, str(tt), (x, y + h), font, 1, (255, 255, 255), 2)
                
            attendance = attendance.drop_duplicates(subset=['Id'], keep='first')
            
            cv2.imshow('im', im)
            
            if (cv2.waitKey(1) == ord('q')):
                
                break
        ts = time.time()
        
        date = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
        
        timeStamp = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')
        
        Hour, Minute, Second = timeStamp.split(":")
        
        fileName = "Attendance\Attendance_" + date + "_" + Hour + "-" + Minute + "-" + Second + ".csv"
        
        attendance.to_csv(fileName, index=False)
        
        cam.release()
        
        cv2.destroyAllWindows()
        
        print(attendance)
        
        res = attendance
        
        self.Total_attendance_lineEdit_4.configure(text=res)


if __name__ == "__main__":
    import sys
    import cv2, os
    import shutil
    import csv
    import numpy as np
    import pandas as pd
    import datetime
    import time
    from PIL import Image

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

